import 'dart:async';
import 'package:flutter/foundation.dart';
import 'package:tutorium_frontend/util/cache_manager.dart';

/// FetchCacheManager - ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ cache ‡∏û‡∏£‡πâ‡∏≠‡∏° auto-refresh ‡∏ó‡∏∏‡∏Å 2 ‡∏ß‡∏±‡∏ô
/// ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£ fetch ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å API ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏≤‡∏£ cache ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
/// ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£ refresh ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• fresh ‡πÄ‡∏™‡∏°‡∏≠
class FetchCacheManager<T> {
  final CacheManager<T> _cacheManager;
  final String _cacheKey;
  final Duration _refreshInterval;

  // Timer ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö auto-refresh
  Timer? _refreshTimer;
  DateTime? _lastRefreshTime;
  bool _isRefreshing = false;

  FetchCacheManager({
    required String cacheKey,
    required CacheManager<T> cacheManager,
    Duration refreshInterval = const Duration(days: 2),
  }) : _cacheKey = cacheKey,
       _cacheManager = cacheManager,
       _refreshInterval = refreshInterval;

  /// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏û‡∏£‡πâ‡∏≠‡∏° cache ‡πÅ‡∏•‡∏∞ auto-refresh
  Future<T> fetch(
    Future<T> Function() fetcher, {
    bool forceRefresh = false,
  }) async {
    try {
      // ‡∏ñ‡πâ‡∏≤ force refresh ‡πÉ‡∏´‡πâ fetch ‡πÄ‡∏•‡∏¢‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ cache
      if (forceRefresh) {
        debugPrint('üîÑ [FetchCache] Force refresh: $_cacheKey');
        final data = await fetcher();
        await _cacheManager.set(_cacheKey, data);
        _lastRefreshTime = DateTime.now();
        _isRefreshing = false;
        return data;
      }

      // ‡∏•‡∏≠‡∏á‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å cache ‡∏Å‡πà‡∏≠‡∏ô
      final cachedData = await _cacheManager.get(_cacheKey);
      if (cachedData != null) {
        debugPrint('‚úÖ [FetchCache] Using cached data: $_cacheKey');

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á refresh ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡πÅ‡∏ö‡∏ö background)
        _scheduleRefreshIfNeeded(fetcher);

        return cachedData;
      }

      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ cache ‡πÉ‡∏´‡πâ fetch ‡πÄ‡∏•‡∏¢
      debugPrint('üîÑ [FetchCache] No cache, fetching: $_cacheKey');
      final data = await fetcher();
      await _cacheManager.set(_cacheKey, data);
      _lastRefreshTime = DateTime.now();
      _isRefreshing = false;
      return data;
    } catch (e) {
      debugPrint('‚ùå [FetchCache] Error fetching $_cacheKey: $e');
      rethrow;
    }
  }

  /// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á refresh ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (background)
  void _scheduleRefreshIfNeeded(Future<T> Function() fetcher) {
    // ‡∏ñ‡πâ‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡∏´‡πâ‡∏≤‡∏°‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏ã‡πâ‡∏≥
    if (_isRefreshing) return;

    // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£ refresh ‡πÄ‡∏•‡∏¢ ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ô‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤
    if (_lastRefreshTime == null) {
      _startAutoRefresh(fetcher);
      return;
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô refresh interval ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    final timeSinceLastRefresh = DateTime.now().difference(_lastRefreshTime!);
    if (timeSinceLastRefresh >= _refreshInterval) {
      _startAutoRefresh(fetcher);
    }
  }

  /// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô auto-refresh (background)
  void _startAutoRefresh(Future<T> Function() fetcher) {
    if (_isRefreshing) return;

    _isRefreshing = true;
    debugPrint('üîÑ [FetchCache] Starting background refresh for $_cacheKey');

    // ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ refresh ‡πÅ‡∏ö‡∏ö async (‡πÑ‡∏°‡πà‡∏£‡∏≠)
    _performRefreshInBackground(fetcher);
  }

  /// ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ refresh ‡πÅ‡∏ö‡∏ö background
  Future<void> _performRefreshInBackground(Future<T> Function() fetcher) async {
    try {
      final data = await fetcher();
      await _cacheManager.set(_cacheKey, data);
      _lastRefreshTime = DateTime.now();
      debugPrint('‚úÖ [FetchCache] Background refresh completed: $_cacheKey');
    } catch (e) {
      debugPrint(
        '‚ö†Ô∏è [FetchCache] Background refresh failed for $_cacheKey: $e',
      );
    } finally {
      _isRefreshing = false;
    }
  }

  /// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö stream (realtime update)
  Stream<T> watchFetch(
    Future<T> Function() fetcher, {
    Duration pollInterval = const Duration(seconds: 30),
  }) async* {
    yield await fetch(fetcher);

    // Poll data ‡∏ó‡∏∏‡∏Å ‡πÜ pollInterval
    while (true) {
      await Future.delayed(pollInterval);
      try {
        yield await fetch(fetcher, forceRefresh: true);
      } catch (e) {
        debugPrint('‚ö†Ô∏è [FetchCache] Watch fetch error: $e');
      }
    }
  }

  /// ‡∏•‡∏ö cache
  Future<void> clear() async {
    await _cacheManager.remove(_cacheKey);
    _lastRefreshTime = null;
    _isRefreshing = false;
    _refreshTimer?.cancel();
    debugPrint('üóëÔ∏è [FetchCache] Cache cleared: $_cacheKey');
  }

  /// ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å auto-refresh timer
  void cancel() {
    _refreshTimer?.cancel();
    _refreshTimer = null;
    _isRefreshing = false;
    debugPrint('‚è∏Ô∏è [FetchCache] Auto-refresh cancelled: $_cacheKey');
  }

  /// ‡∏î‡∏π debug info
  Map<String, dynamic> getStatus() {
    return {
      'cache_key': _cacheKey,
      'is_refreshing': _isRefreshing,
      'last_refresh': _lastRefreshTime?.toIso8601String(),
      'refresh_interval_days': _refreshInterval.inDays,
    };
  }
}

/// Helper class ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏´‡∏•‡∏≤‡∏¢ fetch caches ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
class FetchCachePool {
  static final FetchCachePool _instance = FetchCachePool._internal();

  factory FetchCachePool() => _instance;

  FetchCachePool._internal();

  final Map<String, FetchCacheManager> _managers = {};

  /// ‡∏™‡∏£‡πâ‡∏≤‡∏á ‡∏´‡∏£‡∏∑‡∏≠ ‡∏î‡∏∂‡∏á FetchCacheManager ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö key ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
  FetchCacheManager<T> getOrCreate<T>(
    String key,
    CacheManager<T> cacheManager, {
    Duration refreshInterval = const Duration(days: 2),
  }) {
    if (!_managers.containsKey(key)) {
      _managers[key] = FetchCacheManager<T>(
        cacheKey: key,
        cacheManager: cacheManager,
        refreshInterval: refreshInterval,
      );
    }
    return _managers[key] as FetchCacheManager<T>;
  }

  /// ‡∏•‡∏ö cache ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  Future<void> clearAll() async {
    for (final manager in _managers.values) {
      manager.cancel();
    }
    debugPrint('üóëÔ∏è [FetchCachePool] All caches cleared');
  }

  /// ‡∏î‡∏π status ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  List<Map<String, dynamic>> getAllStatus() {
    return _managers.values.map((m) => m.getStatus()).toList();
  }
}
